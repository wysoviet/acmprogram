#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>

#define REP(i, a) for (int i = 0; i < a; i++)
#define REPD(i, a) for (int i = a - 1; ~i; i--)
#define TR(it, a) for (__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)
#define PB(i) push_back(i)
#define MS(a, i) memset(a, i, sizeof(a))
#define MP(a, b) make_pair(a, b)
#define ALL(a) a.begin(),a.end()
#define DEB(x) cout << #x << " : " << x << endl
#define DEBA(a, n) REP(i, n) cout << #a << "[" << i << "] : " << a[i] << endl
#define FI first
#define SE second

using namespace std;

class StrangeDictionary2 {
public:
	int n, l, a[1<<16][60];
	double f[1<<16][16];
	double gao(int mask, int k) {
		if (f[mask][k] > -0.5) return f[mask][k];
		if ((mask >> k & 1)==0) return f[mask][k] = 0;
		if (mask == (1 << k)) return f[mask][k] = 1;
		int c = 0;
		double ret = 0;
		REP(i, l) if (a[mask][i] != mask) 
			ret += gao(a[mask][i], k), c++;
		return f[mask][k] = ret / c;
	}

	vector <double> getProbabilities(vector <string> w) {
		n = w.size(), l = w[0].size();
		MS(a, 0); 
		REP(i, 1<<n) REP(j, n) f[i][j] = -1;
		REP(i, 1<<n) REP(j, l) {
			char m = 127;
			REP(k, n) if (i>>k&1) m = min(m, w[k][j]);
			int mask = 0;
			REP(k, n) if ((i>>k&1) && m == w[k][j]) mask |= 1<<k; 
			a[i][j] = mask;
		}
	
		vector<double> r;
		REP(i, n) r.PB(gao((1<<n)-1, i));
		return r;	
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <double> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	StrangeDictionary2 *obj;
	vector <double> answer;
	obj = new StrangeDictionary2();
	clock_t startTime = clock();
	answer = obj->getProbabilities(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (fabs(p1[i] - answer[i]) > 1e-9 * max(1.0, fabs(p1[i]))) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <double> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"hardesttestever"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {1.0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ab","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {0.5,0.5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"aza","aab","bba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {0.3333333333333333,0.5,0.16666666666666666};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"abababab","babababa","acacacac","cacacaca","bcbcbcbc","cbcbcbcb"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {0.5,0.5,0.0,0.0,0.0,0.0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
