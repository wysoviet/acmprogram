#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>

#define REP(i, a) for (int i = 0; i < a; i++)
#define REPD(i, a) for (int i = a - 1; ~i; i--)
#define TR(it, a) for (__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)
#define PB(i) push_back(i)
#define MS(a, i) memset(a, i, sizeof(a))
#define MP(a, b) make_pair(a, b)
#define ALL(a) a.begin(),a.end()
#define DEB(x) cout << #x << " : " << x << endl
#define DEBA(a, n) REP(i, n) cout << #a << "[" << i << "] : " << a[i] << endl
#define FI first
#define SE second

using namespace std;

long long gcd(long long a, long long b) {
	if (b == 0) return a;
	return gcd(b, a % b);
}

const int maxn = 1000010;
bool isnpri[maxn] = {0};
long long c;
int pri[80000], npri = 0, phi[maxn] = {0};

void makep(){
	phi[1] = 1;
	for (int i = 2; i < maxn; i++) {
		if (!isnpri[i]) {
			pri[npri++] = i;
			phi[i] = i - 1;
		}
		for (int j = 0; pri[j] * i < maxn; j++) {
			isnpri[pri[j] * i] = 1;
			if (i % pri[j] == 0) {
				phi[pri[j] * i] = phi[i] * pri[j];
				break;
			} else phi[pri[j] * i] = phi[i] * (pri[j] - 1);
		}
	}
}

class FractionInDifferentBases {
public:
	long long getNumberOfGoodBases(long long P, long long Q, long long A, long long B) {
		long long d = gcd(P, Q);
		Q /= d;
		long long cnt = 0, tmp = 1;
		npri = 0;
		makep();
		REP(i, npri) if (Q % pri[i] == 0) {
			tmp *= pri[i];
			for (; Q % pri[i] == 0; Q /= pri[i]);
		}
		tmp *= Q;	
		long long a = (A - 1) / tmp;
		long long b = B / tmp;
		return B - A + 1 - (b - a);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, bool hasAnswer, long long p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FractionInDifferentBases *obj;
	long long answer;
	obj = new FractionInDifferentBases();
	clock_t startTime = clock();
	answer = obj->getNumberOfGoodBases(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	long long p4;
	
	{
	// ----- test 0 -----
	p0 = 99999999999ll;
	p1 = 99999999977ll;
	p2 = 2ll;
	p3 = 1000000000000000000ll;
	p4 = 999999999989999999ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1ll;
	p1 = 9ll;
	p2 = 9ll;
	p3 = 10ll;
	p4 = 1ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5ll;
	p1 = 6ll;
	p2 = 2ll;
	p3 = 10ll;
	p4 = 8ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2662ll;
	p1 = 540ll;
	p2 = 2ll;
	p3 = 662ll;
	p4 = 639ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 650720ll;
	p1 = 7032600ll;
	p2 = 2012ll;
	p3 = 2012540ll;
	p4 = 2010495ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
